import telebot
from aiogram import types

from db_functions import user_in_db, get_all_spheres, get_all_faculties
from db_functions import put_abitur_into_db, put_student_into_db
from db_functions import get_recomendations, get_faculty, get_branches
from db_functions import get_brach_info, get_students, get_rec_branches

from recomendations import RecommendModel, Anketa

from passwords import TOKEN

bot = telebot.TeleBot(TOKEN)
# student_fac = ''
# recommends = []
# rec_brs = []
# cur, fac, br = 'fac', 0, 0

RecommendModel.create_model()
Anketa.create_anketa()

users = {}


class User:
    def __init__(self, type):
        self.type = type
        self.student_fac = ''
        self.recommends = []
        self.rec_brs = []
        self.cur = 'fac'
        self.fac = 0
        self.br = 0
        self.state = 'none'
        self.anketa_ind = -1
        self.anketa = []


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id,
                     '–≠—Ç–æ –±–æ—Ç-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –†–≠–£. –û–Ω –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –†–≠–£, '
                     '–∞ —Ç–∞–∫–∂–µ –ª–∏—á–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏-–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –†–≠–£. '
                     '–ê —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º, —Ä–∞—Å—Å–∫–∞–∑–∞–≤ –æ —Å–≤–æ–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö '
                     '–∏ –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞.\n\n'
                     '–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É–∂–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')


@bot.message_handler(commands=['start'])
def start_welcome(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Çüëã\n–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º, –º—ã –¥–æ–ª–∂–Ω—ã —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ.")
    # await user_reg(message)
    user_registration(message)


def user_registration(message):
    if user_in_db(message.from_user.id):
        bot.send_message(message.chat.id,
                         "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∫–∞ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    itembtn1 = types.KeyboardButton("–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç")
    itembtn2 = types.KeyboardButton("—Å—Ç—É–¥–µ–Ω—Ç")
    markup.add(itembtn1, itembtn2)

    bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞, –∫—Ç–æ —Ç—ã?',
                     reply_markup=[markup])


@bot.message_handler(content_types='text')
def text_message(message):
    try:
        # # print('message.text', message.text)
        # print('users', users)
        # global student_fac
        # global recommends, cur, fac, br, rec_brs
        if message.chat.id in users and users[message.chat.id].state == 'anketa':
            if message.text.isdigit():

                users[message.chat.id].anketa.append(int(message.text))

                if users[message.chat.id].anketa_ind < 10:
                    # get next question
                    users[message.chat.id].anketa_ind += 1
                    bot.send_message(message.chat.id,
                                     Anketa.get_question(users[message.chat.id].anketa_ind))
                else:
                    # get recommendation
                    users[message.chat.id].state = 'none'
                    recommend = RecommendModel.get_recommendation(users[message.chat.id].anketa)
                    abiturient_registration(message, recommend)
            else:
                bot.send_message(message.chat.id,
                                 '–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ:')

        elif message.text == '–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç':
            user = User(message.text)
            users[message.chat.id] = user

            abiturient_quest(message)

        elif message.text == '—Å—Ç—É–¥–µ–Ω—Ç':
            user = User(message.text)
            users[message.chat.id] = user

            student_registration(message)

        elif message.text in get_all_spheres():
            # print('Before user_in_db ', message.from_user.id)
            if not user_in_db(message.from_user.id):
                put_abitur_into_db(message.from_user.id, message.text)

            bot.send_message(message.chat.id,
                             '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–∫–æ–Ω—á–∏–ª –≤–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å. –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã.')

            # abiturient_recomendations(message)

            telebot.types.ReplyKeyboardRemove()

            users[message.chat.id].recommends = get_recomendations(message.from_user.id)
            # print('recommends', users[message.chat.id].recommends)
            send_recommendations(message)
            users[message.chat.id].cur = 'fac'
            users[message.chat.id].fac = 0
            users[message.chat.id].br = 0

        elif message.text in get_all_faculties():
            users[message.chat.id].student_fac = message.text
            student_registration_finish(message)

        elif message.text in get_branches(users[message.chat.id].student_fac):
            student_branch = message.text

            bot.send_message(message.chat.id,
                             '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–∫–æ–Ω—á–∏–ª –≤–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å. '
                             '–¢–µ–ø–µ—Ä—å –∂–¥–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏.')

            if not user_in_db(message.from_user.id):
                put_student_into_db(message.from_user.id, users[message.chat.id].student_fac, student_branch)

        elif message.text == '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç':
            if users[message.chat.id].cur == 'fac':
                users[message.chat.id].cur = 'br'
                users[message.chat.id].rec_brs = get_rec_branches(users[message.chat.id].recommends[users[message.chat.id].fac])
                # print('rec_brs', users[message.chat.id].rec_brs)
                bot.send_message(message.chat.id,
                                 '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π –≤—ã—Å—à–µ–π —à–∫–æ–ª–µ.'
                                 '\n–°—Ç—É–¥–µ–Ω—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π!')

                send_recommendations(message)
            elif users[message.chat.id].cur == 'br':
                bot.send_message(message.chat.id,
                                 '<i>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º</i>', parse_mode='HTML')
                bot.send_message(message.chat.id,
                                 '–¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!')
                send_student_request(message)
                if users[message.chat.id].br + 1 == len(users[message.chat.id].rec_brs):
                    if users[message.chat.id].fac + 1 == len(users[message.chat.id].recommends):
                        bot.send_message(message.from_user.id, '–ù–∞ —ç—Ç–æ–º –ø–æ–∫–∞ –≤—Å–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ')
                        del users[message.chat.id]
                        return
                    users[message.chat.id].cur = 'fac'
                    users[message.chat.id].fac += 1
                    users[message.chat.id].br = 0
                    bot.send_message(message.from_user.id,
                                     '–ù–∞ —ç—Ç–æ–º –≤—Å–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. '
                                     '–Ø –ø—Ä–æ–¥–æ–ª–∂—É —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã.')

                else:
                    users[message.chat.id].br += 1
                send_recommendations(message)

        elif message.text == '–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç':
            if users[message.chat.id].cur == 'fac':
                if users[message.chat.id].fac + 1 == len(users[message.chat.id].recommends):
                    bot.send_message(message.from_user.id, '–ù–∞ —ç—Ç–æ–º –ø–æ–∫–∞ –≤—Å–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ')
                    del users[message.chat.id]
                    return
                users[message.chat.id].fac += 1
                send_recommendations(message)
            elif users[message.chat.id].cur == 'br':
                if users[message.chat.id].br + 1 == len(users[message.chat.id].rec_brs):
                    users[message.chat.id].cur = 'fac'
                    users[message.chat.id].fac += 1
                    users[message.chat.id].br = 0
                    bot.send_message(message.from_user.id,
                                     '–ù–∞ —ç—Ç–æ–º –≤—Å–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. '
                                     '–Ø –ø—Ä–æ–¥–æ–ª–∂—É —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã.')

                else:
                    users[message.chat.id].br += 1
                send_recommendations(message)

    except Exception as e:
        print(repr(e))
        bot.send_message(message.from_user.id, '–ù–∞ —ç—Ç–æ–º –ø–æ–∫–∞ –≤—Å–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ')


def abiturient_quest(message):
    users[message.chat.id].state = 'anketa'
    users[message.chat.id].anketa_ind = 1

    bot.send_message(message.from_user.id,
                     '–ü—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è.\n'
                     '<u>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —ç—Ç–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10</u> –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–µ—Ä–Ω–æ—Å—Ç—å—é —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n',
                     parse_mode='HTML')
    bot.send_message(message.from_user.id,
                     Anketa.get_question(1), reply_markup=False)


def abiturient_registration(message, recommend):
    all_spheres = get_all_spheres()
    # print('all_spheres', all_spheres)
    reply_keyboard = []
    for i in range(len(all_spheres[::2])):
        reply_keyboard.append([all_spheres[i], all_spheres[i + 3]])
    if len(all_spheres) % 2 == 1:
        reply_keyboard.append([all_spheres[-1]])

    markup = types.ReplyKeyboardMarkup(reply_keyboard,
                                       one_time_keyboard=True,
                                       resize_keyboard=True)

    bot.send_message(message.chat.id,
                     '–ù–∞—à–∞ —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏—è: ' + '<b>'+recommend+'</b>', parse_mode='HTML')
    bot.send_message(message.chat.id,
                     '\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –∫–∞–∫–∞—è –æ–¥–Ω–∞ —Å—Ñ–µ—Ä–∞ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
                     reply_markup=[markup])
    # bot.register_next_step_handler(msg, #—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥)


def student_registration(message):
    all_faculties = get_all_faculties()
    # print('all_faculties', all_faculties)
    reply_keyboard = []
    for i in range(len(all_faculties[::2])):
        reply_keyboard.append([all_faculties[i], all_faculties[i + 5]])
    if len(all_faculties) % 2 != 0:
        reply_keyboard.append([all_faculties[i-2]])

    markup = types.ReplyKeyboardMarkup(reply_keyboard,
                                           one_time_keyboard=True,
                                           resize_keyboard=True)

    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ —Ç—ã –æ–±—É—á–∞–µ—à—å—Å—è?',
                         reply_markup=[markup])


def student_registration_finish(message):
    # global student_fac
    all_branches = get_branches(users[message.chat.id].student_fac)
    # print('all_branches', all_branches)
    reply_keyboard = []
    for i in range(len(all_branches[:len(all_branches)-1:2])):
        reply_keyboard.append([all_branches[i], all_branches[i + len(all_branches) // 2]])
    if len(all_branches) % 2 == 1:
        reply_keyboard.append([all_branches[-1]])

    markup = types.ReplyKeyboardMarkup(reply_keyboard,
                                       one_time_keyboard=True,
                                       resize_keyboard=True)

    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—ã –æ–±—É—á–∞–µ—à—å—Å—è?',
                     reply_markup=[markup])

    telebot.types.ReplyKeyboardRemove()


def send_recommendations(message):
    # global recommends
    # global cur, fac, br
    if users[message.chat.id].cur == 'fac':  # —Å–µ–π—á–∞—Å –ø—Ä–∏—Å—ã–ª–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        markup = types.ReplyKeyboardMarkup([['–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', '–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç']],
                                           one_time_keyboard=True,
                                           resize_keyboard=True)
        s = get_faculty(users[message.chat.id].recommends[users[message.chat.id].fac])[1:]
        rrecs = f'{s[0]}\n<b>{s[2]}</b>\n\n{s[1]}'
        # bot.send_message(message.chat.id, rrecs,
        #                  reply_markup=[markup])
        bot.send_photo(message.chat.id,
                       photo=open('images/'+str(users[message.chat.id].recommends[users[message.chat.id].fac])+'.jpg', 'rb'),
                       caption=rrecs, parse_mode='HTML',
                       reply_markup=[markup])
    elif users[message.chat.id].cur == 'br':
        markup = types.ReplyKeyboardMarkup([['–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', '–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç']],
                                           one_time_keyboard=True,
                                           resize_keyboard=True)
        s = get_brach_info(users[message.chat.id].rec_brs[users[message.chat.id].br])[1:2] + get_brach_info(users[message.chat.id].rec_brs[users[message.chat.id].br])[4:]
        progs = '\n'.join(list(' - '+x for x in s[1].split(' - ')))
        egs = '\n'.join(list(' - '+x for x in s[2].split(' - ')))
        rrecs = f'<u>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</u> <b>{s[0]}</b>\n\n<u>–ü—Ä–æ–≥—Ä–∞–º–º—ã:</u>\n{progs}\n\n<u>–ï–ì–≠:</u>\n{egs}'
        bot.send_message(message.chat.id, rrecs, parse_mode='HTML',
                         reply_markup=[markup])


def send_student_request(message):
    students = get_students(users[message.chat.id].rec_brs[users[message.chat.id].br])
    # print('students', students)
    if message.from_user.username and students:
        for id in students:
            # print(id)
            bot.send_message(id, f'–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç https://t.me/{message.from_user.username} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. '
                                 f'–ù–∞–ø–∏—à–∏ –µ–º—É –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã!')


while True:
    try:
        bot.polling(none_stop=True)
    except OSError:
        bot.polling(none_stop=True)
